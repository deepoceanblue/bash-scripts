#!/bin/bash
#########################################################
#
# name: _mmenu (multimenu)
# author: Tomasz Winiarski
# date: 20200123
# desc: chooses appropriate menu depending on environment
#       (X, term, console) and available apps
# usage: see helpMsg below or use `_mmenu --help`
#
########################################################
# theme defaults
declare font='DejaVu Sans'
declare nFg='lightgrey'
declare nBg='#0c1414' # very dark grey
declare sFg='white'
# themes change only selected background
declare sBg='darkgreen'

function err {
  [[ -t 1 ]] || redir="> $(date +%Y%m%d%H%M%S).mmenu.log"
  echo -e "$(tput setaf 1)${@}$(tput sgr0)" ${redir}

}

function helpMsg {
  cat << 'HELPMSG'

    _mmenu -- chooses appropriate menu

    USAGE:

      _mmenu [options] --file|-f <filename>

      _mmenu [options] --items|-i <item1> <item2> .. <item n>


     If no --file or --items is given, the script will try
     to read items list from pipe:

     stdin | _mmenu [options]

   There are following options:

   --menu-app|-a (dmenu|slmenu|climenu)
     :force use of a given app to display menu.
      Comp. -g
   
   --file|-f <filename>
     :read items to be displayed from a file.
   
   --gui-if-possible|-g
     :force use of gui menu app (dmenu) if in X,
      even if stdout is term.
   
   --help|-h
     :display this message and exit.
   
   --items|-i <item1> <item2> .. <item n>
     :read items to be displayed from cliargs.
      Must be the last option.

    --prompt|p "<prompt tekst>"
      :prompt to be used.

    --theme|-t <theme>
      :use given colorscheme. Theme might be: default, media, warning, www.
       If -t absent in cli, default theme is used.

HELPMSG
}

declare items=()
declare mApp=;
declare prompt="choose: "
declare theme="default"

while : ; do

  case "$1" in
    --menu-app|-a) mApp="$2" ; shift 2 ;;
    --file|-f) 
              while read line; do
                items+=("${line}")
              done < "$2" 
              shift 2
    ;;
    --gui-if-possible|-g) shift ; [[ $DISPLAY ]] && [[ $(which dmenu) ]] && mApp="dmenu" || err "no dmenu in $PATH";;
    --help|-h) helpMsg && exit 0 ;;
    --items|-i) shift ; items=("${@}"); break ;;
    --prompt|-p) prompt="${2}" ; shift 2;;
    --theme|-t) 
                case "$2" in
                  warning) sBg='red';;
                  www) sBg='#bf86af';;
                  media) sBg='#597c80';;
                  *) ;;
                esac
                shift 2
                ;;
    '') break;;
    *)
       err "Unknown option ${1}"
       helpMsg
       exit 129
    ;;
  esac

done

if [[ ! $mApp ]] ; then
  if [[ -t 1 ]] ; then
    [[ $(which slmenu) ]] && mApp="slmenu" || mApp="climenu" # created with bash `select`
  else
    [[ $(which dmenu) ]] && mApp="dmenu" || err "no dmenu in $PATH"
  fi
fi

if [[ ${#items[@]} == 0 ]]; then
  if [[ -p /dev/stdin ]]; then
    while IFS= read line; do
      items+=("${line}")
    done
  else
    err "No items to display"
    helpMsg
    exit 130
  fi
fi


case "$mApp" in 
  dmenu) printf '%s\n' "${items[@]}" | dmenu -b -i -l 10 -fn 'DejaVu Sans' -nf $nFg -nb $nBg -sf $sFg -sb $sBg -p "$prompt" ;;
  slmenu) printf '%s\n' "${items[@]}" | slmenu -b -i -p "${prompt}" ;;
  climenu) 
          select item in "${items[@]}"; do
            printf '%s\n' "${item}"
            break
          done
  ;;
esac

exit 0

#vim: ft=sh ts=2 tw=2
