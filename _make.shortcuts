#!/bin/bash
###########################################################
#
# name: _make.shortcuts
# author: Tomasz Winiarski 
# date: 20200117 
#
# desc: creates shortcuts for bash and ranger from shared
#       source file. Format for source file is:
#       $PWD/directories
#           -"d dir" for jump to directory shortcut
#       $PWD/commands
#           -"cc cmd" for command shortcut
#       where d is any single and cc are any two alphanum chars.
#              e.g: "m $HOME/music"
#              or:  "kh _convert --to html"
#                   "kp _convert --to pdf"
#       Source files must exist in the $PWD.
#
#       Do not enclose records in src file in ". 
#       One record per line.
#       No empty lines (or replace mapfile with while
#       read and regex matching to discard empty lines).
#       
#       In out files d is prefixed with ".o" for open dir,
#       with ".p" for paste into dir; cc is prefixed with "."
#       So "m $HOME/music" becomes, e.g. "map .om $HOME/music".
#       To change it, modify prefix_open and prefix_paste_into.
#       To change out files modify {bash,ranger}_fname.
#       Out files must exist.
#       
# deps: none, bash built-ins
#
# 
# TODO: maybe make more portable, if need arises
# TODO: maybe add support for other shells/filemanagers
#       if I start using them often enough
###########################################################
#
# === Constants
# edit to reflect your setup 
#
# for safety sake, keep these separate from .bashrc/rc.conf
bash_fname="$XDG_CONFIG_HOME/bash/.bash_autoaliases"
ranger_fname="$XDG_CONFIG_HOME/ranger/ranger_autocmds"
# default prefixes
prefix_open='.o'
prefix_paste_into='.p'
#
# === Main
ii_data=0

mapfile -n 0 -O $ii_data -t data < ./directories 

ii_cmds="${#data[@]}"

mapfile -n 0 -O $ii_cmds -t data < ./commands

bash_shortcuts=()
ranger_shortcuts=()

ii_max=${#data[@]}

while [[ $ii_data -lt $ii_cmds ]]; do
  # slightly less efficient but allows for variable shortcut length
  # same may be used with the commad shortcuts, I don't need it
  # shortcut="${data[$ii_data]%% *}"
  # directory="${data[$ii_data]#* }"
  shortcut="${data[$ii_data]:0:1}"
  directory="${data[$ii_data]:1}"
  # \n allows us to just echo -e to file
  bash_shortcuts+=("\
    alias ${prefix_open}${shortcut}=\"cd ${directory}\"\n\
    alias ${prefix_paste_into}${shortcut}=\"cp -t ${directory}\"\
  ")
  # ranger seems to have issues with not expanded $HOME
  # while ~ works fine
  ranger_shortcuts+=("\
    map ${prefix_open}${shortcut} cd ${directory/\$HOME/\~}\n\
    map ${prefix_paste_into}${shortcut} cp -t ${directory} %s\n\
  ")

  ((ii_data++))

done

while [[ $ii_data -lt $ii_max ]]; do

  shortcut=".${data[${ii_data}]:0:2}"
  cmd="${data[${ii_data}]:3}"
  bash_shortcuts+=("alias ${shortcut}=\"${cmd}\"\n")
  ranger_shortcuts+=("map ${shortcut} ${cmd}\n")

  ((ii_data++))

done

echo -e ${bash_shortcuts[@]} > $bash_fname 
echo -e ${ranger_shortcuts[@]} > $ranger_fname 
# echo -e ${bash_shortcuts[@]} # for quick test 
# echo -e ${ranger_shortcuts[@]} # for quick test

unset bash_fname bash_shortcuts cmd ii_cmds ii_data ii_max directory prefix_open prefix_paste_into ranger_fname ranger_shortcuts shortcut
#vim: ft=sh ts=2 tw=2
