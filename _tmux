#!/bin/bash
##############################################
#
# name: _tmux
# author: Tomasz Winiarski
# date; 20200124
# desc: simplifies handling of tmux sessions
#       including use of presets and ability
#       to autocreate the default session.
# deps: tmux, _mmenu (for -m)
#
# USAGE: use _tmux --help or see helpMsg below
# 
##############################################
#
# TODO: add presets 
#
function helpMsg {
  cat << 'HELPMSG'

    _tmux -- simplifies handling of tmux session

    USAGE:

      _tmux <session-name> [<command>]

      _tmux [options]

      Invoked with no arguments it will create default session with auto-
      generated name , running bash.

      When invoked with no option, first arg is session-name, the optional 
      rest is the command to be executed.

      If no session name is passed it will be autogenerated (%Y%m%d%H%M%S).

      If session-name already exist, it will be attached to the terminal.
      If already attached to other tmux session, will switch to session-name.

      Valid options are:

      --command|-c
        :command to be executed in new window.
         Must be the last option.

      --help|-h
        :prints this message and exit.

      --preset|-p [<preset name>]
        :spawns session with custom names, layout and applications running.
         Valid preset names are:
           (layout only): '50-50', '70-30', 'grid'
           (layout and cmds): 'net', 'coding', 'sysmon' 
         Must be the last option.
         All options except -s and -d will be overwritten.

      --run-detached|-d
        :spawn detached session.

      --choose-session-from-menu|-m
        :allows you to choose session to attach to from menu.
         If new name is provided (e.g. in dmenu), the session
         will be created/attached/switched to as usual.

      --session-name|-s [<session-name>]
        :sets the name of a session.
          
HELPMSG
}

function chooseSessionFromMenu {
  local -a sNames
  while read sName ; do
    sNames+=("${sName%%:*}") # ':' is a separator in tmux output
  done < <(tmux list-sessions 2>/dev/null) # we discard stderr to not pollute sNames with err msg 
  printf '%s\n' "${sNames[@]}" | _mmenu
  return 0
}

function use_preset {
  [[ -n $@ ]] || exit 130 # TODO: add presets
  local -ar layoutName="$@"

  case "$layoutName" in
    grid) echo "grid layout";;
    monocle) echo "monocle layout";;
    side-by-side) echo "side-by-side layout";;
  esac
}

declare defaultCmd="/bin/bash"

while :; do

  case "$1" in 
    --session-name|-s) sessionName="$2" ; shift 2 ;;    
    --command|-c) shift; cmd="${@}" ; break ;;
    --help|-h) helpMsg ; exit 0 ;;
    --preset|-p) use_preset "$2" ; shift 2 ; break ;;
    --run-detached|-d) runDetached="-d" ; shift 1 ;; # option to a tmux new(-session) command
    --choose-session-from-menu|-m) sessionName="$(chooseSessionFromMenu)" ; shift 1 ;; 
    '') break;;
    *) sessionName="$1" ; shift 1 ; cmd="$@" ; break ;;
  esac

done

declare sessionExists
declare renameSession

if [[ -n "${sessionName}" ]]; then 
  tmux has-session -t "$sessionName" 2>/dev/null
  [[ $? == 0 ]] && sessionExists="true"
else
  sessionName="$(date +%Y%m%d%H%M%S)"
  renameSession="tmux command-prompt -I \"#S\" \"rename-session -- '%%'\";"
fi

if [[ "$sessionExists" == true ]]; then

    if [[ -z $TMUX ]]; then
      [[ -n $cmd ]]\
        && tmux attach-session -d -t $sessionName \; new-window $cmd\
        || tmux attach-session -d -t $sessionName

    else
      [[ -n $cmd ]]\
        && tmux switch -t "$sessionName" \; new-window $cmd\
        || tmux switch -t "$sessionName"
    fi

else 
    tmux new-session ${runDetached} -s ${sessionName} "${renameSession}${cmd:-${defaultCmd}}"
fi

#vim: ft=bash ts=2 tw=2
