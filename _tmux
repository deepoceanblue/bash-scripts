#!/bin/bash
##############################################
#
# name: _tmux
# author: Tomasz Winiarski
# date; 20200124
# desc: simplifies handling of tmux sessions
#       including use of presets and ability
#       to autocreate the default session.
# deps: tmux, _mmenu (for -m)
#
# USAGE: use _tmux --help or see helpMsg below
# 
##############################################
#
# TODO: add presets 
#
function helpMsg {
  cat << 'HELPMSG'

    _tmux -- simplifies handling of tmux session

    USAGE:

      _tmux <session-name|preset-name> [<command>]

      _tmux [options]

      Invoked with no arguments it will create default session with auto-
      generated name, running bash.

      When invoked with no option, first arg is session-name, the optional 
      rest is the shell command to be executed.

      If session-name already exist, it will be attached to the terminal.
      If inside tmux session, will switch to session-name.

      If no session name is passed (directly or via -s) it will be autogenerated
      from current date and time (%Y%m%d%H%M%S).

      Valid cli options are:

      --command|-c
        :command to be executed in new window.
         Must be the last option.

      --help|-h
        :prints this message and exit.

      --preset|-p [<preset name>] : NOT FULLY IMPLEMENTED
        :spawns *new* session with custom names, layout and applications running.
         Valid preset names are:
           (layout only): master-slave|ms, horizontal-split|hs, vertical-split|vs
                          grid|g
         All options except -s and -d will be silently discarded. 
         

      --run-detached|-d
        :spawn detached session.

      --choose-session-from-menu|-m
        :allows you to choose session to attach to from menu.
         If new name is provided (e.g. in dmenu), the session
         will be created/attached/switched to as usual.

      --session-name|-s [<session-name>]
        :sets the name of a session.

HELPMSG
}


function chooseSessionFromMenu {
  local sName
  tmuxVer=$(tmux -V)
  tmuxVer="${tmuxVer##* }"
  if [[ ${tmuxVer%%.*} -lt 2 ]]; then
  # for tmux ver. that do not support #{var} syntax.
  # We compare only maior ver no.
    local -a sNames
    while read sName ; do
      sNames+=("${sName%%:*}") # ':' is a separator in tmux output
    done < <(tmux list-sessions 2>/dev/null) # we discard stderr to not pollute sNames with err msg 
    printf '%s\n' "${sNames[@]}" | _mmenu
  else
  # for tmux 2+
    tmux list-sessions -F \#{session-name} | _mmenu
  fi
  return 0
}

function use_preset { 
  multiSplit="for ii in {1..3}; do tmux split -v; done"
  tSel="tmux select-layout -t."
  preset="$@" # do not make them local for now
  [[ -n $preset ]] || exit 130 # TODO: add presets

  case "$preset" in

    hs|horizontal-split)
      layoutCmd="tmux split -h;";
    ;;

    vs|vertical-split)
      layoutCmd="tmux split -v";
    ;;

    ms|master-slave)
      layoutCmd="$multiSplit ; $tSel main-vertical;"
    ;;

    grid|g) 
      layoutCmd="$multiSplit ; $tSel tiled;"
    ;;

  esac
}

declare defaultCmd="/bin/bash"

declare cmd
declare sessionName
declare runDetached

while :; do

  case "$1" in 
    --session-name|-s) sessionName="$2" ; shift 2 ;;    
    --command|-c) shift; cmd="${@}" ; break ;;
    --help|-h) helpMsg ; exit 0 ;;
    --preset|-p) use_preset "$2" ; shift 2 ; break ;;
    --run-detached|-d) runDetached="-d" ; shift 1 ;; # option to a tmux new(-session) command
    --choose-session-from-menu|-m) sessionName="$(chooseSessionFromMenu)" ; shift 1 ;; 
    '') break;;
    *) [[ $1 =~ g|hs|ms|vs ]] && use_preset ${1} ; sessionName="$1" ; shift 1 ; cmd="$@" ; break ;;
  esac

done

declare sessionExists
declare renameSession

if [[ -n "${sessionName}" ]]; then 
  tmux has-session -t "$sessionName" 2>/dev/null
  [[ $? == 0 ]] && sessionExists="true"
else
  sessionName="${HOSTNAME}_$(date +%Y%m%d%H%M%S)"
  renameSession="tmux command-prompt -I \"#S\" \"rename-session -- '%%'\";"
fi

if [[ "$sessionExists" == true ]]; then # code repeated to avoid issues
                                        # with multiple levels of quoting

    if [[ -z $TMUX ]]; then # if not inside tmux session

      [[ -n $cmd ]]\
        && tmux attach-session -d -t $sessionName \; new-window $cmd\
        || tmux attach-session -d -t $sessionName

    else

      [[ -n $cmd ]]\
        && tmux switch -t $sessionName \; new-window $cmd\
        || tmux switch -t "$sessionName"

    fi

else 

    if [[ -z $TMUX ]]; then #if not inside tmux session
      tmux new-session ${runDetached} -s ${sessionName} "${layoutCmd}${renameSession}${cmd:-${defaultCmd}}\;"

    else
      # if you prefer script to adhere to your tmux setup, i.e.
      #   - by default: fail with msg about nesting sessions
      #   - if nesting allowed: create nested abomination 
      # just remove the whole else statement

      # I only use bare '.t' inside tmux, as a convenient alternative to '<prefix>s'
      # so I prefer it to make me choose session from menu
      echo "Already inside tmux---assuming you want to switch sessions..."
      tmux choose-tree -Zs # if inside tmux simply choose session

    fi
fi

#vim: ft=bash ts=2 tw=2
